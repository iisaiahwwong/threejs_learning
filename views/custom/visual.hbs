
<!--<script>-->
  <!--$(function() {-->
    <!--init();-->
    <!--loadCircle();-->
    <!--animate();-->
  <!--});-->

  <!--var camera, cScene, cssScene, cssRenderer, cRenderer, controls;-->

  <!--var width = window.innerWidth,-->
      <!--height = window.innerHeight;-->

  <!--function init() {-->
    <!--cScene = new THREE.Scene();-->
    <!--cssScene = new THREE.Scene();-->

    <!--camera = new THREE.PerspectiveCamera(60, width/height, .1, 10000);-->
    <!--camera.position.z = 2;-->

    <!--cRenderer = new THREE.CanvasRenderer();-->
    <!--cRenderer.setSize(width, height);-->

    <!--cssRenderer = new THREE.CSS3DRenderer();-->
    <!--cssRenderer.setSize( window.innerWidth, window.innerHeight );-->
    <!--cssRenderer.domElement.style.position = 'absolute';-->



    <!--controls = new THREE.OrbitControls(camera, cRenderer.domElement);-->

    <!--$("#container").append(cRenderer.domElement);-->

    <!--$(window).resize(function(){-->
      <!--var SCREEN_WIDTH = window.innerWidth;-->
      <!--var SCREEN_HEIGHT = window.innerHeight;-->

      <!--camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;-->
      <!--camera.updateProjectionMatrix();-->

      <!--cRenderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );-->
    <!--});-->
  <!--}-->

  <!--function loadCircle() {-->
    <!--var geometry = new THREE.Geometry();-->
    <!--var material = new THREE.LineBasicMaterial({-->
      <!--color: 0x379392,-->
      <!--linewidth: 3-->
    <!--});-->

    <!--var radius = 1;-->
    <!--var objResolution = 361;-->

    <!--// Draw Circle-->
    <!--for(var i = 0; i < objResolution; i++) {-->
      <!--// Convert angle to radians-->
      <!--var angle = i * Math.PI/180;-->

      <!--// X Coordinates-->
      <!--x = radius * Math.cos(angle);-->
      <!--y = radius * Math.sin(angle);-->
      <!--z = 0;-->

      <!--geometry.vertices.push(new THREE.Vector3(x, y, z));-->
    <!--}-->


    <!--var obj = new THREE.Line(geometry, material);-->
    <!--var obj2 = new THREE.Line(geometry, material);-->

    <!--obj.position.z = 0;-->
    <!--obj2.position.z = -1;-->
    <!--cScene.add(obj);-->
    <!--cScene.add(obj2);-->

    <!--var geometry2 = new THREE.Geometry();-->

    <!--geometry2.vertices.push(obj.geometry.vertices[200]);-->
    <!--geometry2.vertices.push(obj2.geometry.vertices[100]);-->

    <!--console.log(geometry2);-->

    <!--var material2 = new THREE.LineBasicMaterial( { color: 0xffffff, linewidth: 2 } );-->
    <!--var line = new THREE.Line(geometry2, material2);-->
    <!--cScene.add(line);-->

  <!--}-->

  <!--function animate() {-->
    <!--requestAnimationFrame(animate);-->
    <!--cRenderer.render(cScene, camera);-->
  <!--}-->

<!--</script>-->
<!--<style>-->
	<!--.arc {-->
		<!--width: 300px;-->
		<!--height: 180px;-->
		<!--box-shadow: 0px 0px 12px rgba(0,255,255,0.5);-->
		<!--border: 1px solid rgba(127,255,255,0.25);-->
		<!--text-align: center;-->
	<!--}-->
<!--</style>-->
<!--<script src="/js/vendor/CSS3DRenderer.js"></script>-->
<!--<script src="/js/vendor/tween.min.js"></script>-->

<!--<script src="/js/vendor/Projector.js"></script>-->
<!--<script src="/js/vendor/CanvasRenderer.js"></script>-->
<!--<script>-->
	<!--var camera, light, scene, renderer, rectangle, scene2, renderer2, div, controls;-->
	<!--var scene2, renderer2;-->

	<!--init();-->
	<!--animate();-->

	<!--function init() {-->
		<!--//camera-->
		<!--camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);-->
		<!--camera.position.set(0, 0, -1000);-->

		<!--//controls-->
		<!--controls = new THREE.OrbitControls(camera);-->
		<!--controls.rotateSpeed = 1.0;-->
		<!--controls.zoomSpeed = 1.2;-->
		<!--controls.panSpeed = 0.8;-->

		<!--//Scene-->
		<!--scene = new THREE.Scene();-->

		<!--//CubeGeometry-->
		<!--rectangle = new THREE.Mesh(new THREE.CubeGeometry(600, 350, 100), new THREE.MeshPhongMaterial());-->
		<!--scene.add(rectangle);-->

		<!--//TorusGeometry-->
		<!--var torus = new THREE.Mesh(new THREE.TorusGeometry(60, 30, 20, 20),-->
						<!--new THREE.MeshNormalMaterial());-->
		<!--torus.position.set(10, 0, -200);-->
		<!--scene.add(torus);-->

		<!--//HemisphereLight-->
		<!--hemiLight = new THREE.HemisphereLight(0xffbf67, 0x15c6ff);-->
		<!--scene.add(hemiLight);-->

		<!--//WebGL Renderer-->
		<!--renderer = new THREE.CanvasRenderer({ antialias: true });-->
		<!--renderer.setClearColor(0xffffff, 1)-->
		<!--renderer.setSize(window.innerWidth, window.innerHeight);-->
		<!--renderer.domElement.style.zIndex = 5;-->
		<!--document.body.appendChild(renderer.domElement);-->

		<!--//CSS3D Scene-->
		<!--scene2 = new THREE.Scene();-->

		<!--//HTML-->
		<!--element = document.createElement('div');-->
		<!--element.innerHTML = 'Plain text inside a div.';-->
		<!--element.className = 'animated bounceInDown' ;-->
		<!--element.style.background = "#0094ff";-->
		<!--element.style.fontSize = "2em";-->
		<!--element.style.color = "white";-->
		<!--element.style.padding = "2em";-->

		<!--//CSS Object-->
		<!--div = new THREE.CSS3DObject(element);-->
		<!--div.position.x = 8;-->
		<!--div.position.y = 9;-->
		<!--div.position.z = 185;-->
		<!--scene2.add(div);-->

		<!--//CSS3D Renderer-->
		<!--renderer2 = new THREE.CSS3DRenderer();-->
		<!--renderer2.setSize(window.innerWidth, window.innerHeight);-->
		<!--renderer2.domElement.style.position = 'absolute';-->
		<!--renderer2.domElement.style.top = 0;-->
		<!--document.body.appendChild(renderer2.domElement);-->
	<!--}-->

	<!--function animate() {-->
		<!--requestAnimationFrame(animate);-->
		<!--renderer2.render(scene2, camera);-->
		<!--renderer.render(scene, camera);-->
		<!--controls.update();-->
	<!--}-->
<!--</script>-->
<script src="/js/vendor/tween.min.js"></script>
<script src="/js/vendor/CSS3DRenderer.js"></script>
<style>
	@import url('https://fonts.googleapis.com/css?family=Roboto:100,300,400');
	* {
		font-family: 'Roboto';
	}
	.dir {
		width: 300px;
		height: 300px;
		border-radius: 50%;
		/*box-shadow: 0px 0px 12px rgba(0,255,255,0.5);*/
		border: 2px solid white;
		text-align: center;
		cursor: default;
		position: relative;
	}

	.dir .div-inner {
		border-radius: 50%;
		width: 280px;
		height: 280px;
		border: 1px solid rgba(255, 255, 255, 0.6);
		position: absolute;
		margin: -140px 0px 0px -140px;
		top: 50%;
		left: 50%;
	}

	.dir:hover {
		box-shadow: 0px 0px 12px rgba(0,255,255,0.75);
		border: 1px solid rgba(127,255,255,0.75);
	}

	.dir .id {
		position: absolute;
		top: 20px;
		right: 20px;
		font-size: 30px;
		color: rgba(127,255,255,0.75);
	}

	.dir .type {
		height: 280px;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 60px;
		color: rgba(255,255,255,0.75);
		text-shadow: 0 0 10px rgba(0,255,255,0.95);
	}

	.line-outer {
		width:100%;
		font-size: 20px;
		text-align:center;
		border-bottom: 20px solid rgba(255, 255, 255, 0.7);
		line-height:0.1em;
		margin:10px 0 20px;
	}
	.line-outer .inner {
		position: absolute;
		top: 40%;
		left: 30%;
		background:#000;
		font-weight: 100;
		padding: 20px 20px;
		color: white;
	}

	.dir .name {
		position: absolute;
		bottom: 15px;
		left: 0px;
		right: 0px;
		font-size: 20px;
		color: rgba(127,255,255,0.75);
	}

	.file {
		width: 40px;
		height: 55px;
		/*box-shadow: 0px 0px 12px rgba(0,255,255,0.5);*/
		border: 1px solid #83F0DC;
		text-align: center;
		background-color: black;
		cursor: default;
	}

	.file:hover {
		box-shadow: 0px 0px 12px rgba(0,255,255,0.75);
		border: 1px solid rgba(127,255,255,0.75);
	}

	.file .id {
		position: absolute;
		top: 20px;
		right: 20px;
		font-size: 30px;
		color: rgba(127,255,255,0.75);
	}

	.file .type {
		position: absolute;
		top: 0px;
		left: 0px;
		right: 0px;
		font-size: 20px;
		font-weight: bold;
		color: rgba(255,255,255,0.75);
		/*text-shadow: 0 0 10px rgba(0,255,255,0.95);*/
	}

	.file .name {
		position: absolute;
		bottom: 15px;
		left: 0px;
		right: 0px;
		font-size: 10px;
		color: rgba(127,255,255,0.75);
	}
</style>
<div id="container">

</div>

<script>
	$(function() {
		init();
		animate();
	});

	var camera, sceneGL, rendererGL, sceneCss, rendererCss, div, controls;

	var raycaster;
	var mouse = new THREE.Vector2();

	var dirObjects = [];
	var fileObjects = [];
	var table = [];
	var dirTable = [];
	var lineTable = [];
	var targets = { table: [], dir: [], line: [], grid: [] };

	function init() {
		// Doc
		for(var i = 0; i < 1; i++) {
			dirTable.push(createDir(i, 'Desktop', '' ));
		}

		for(var i = 0; i < 10; i++) {
			table.push(createFile(i, 'Doc', '' ));
		}

		// Raycaster
		raycaster = new THREE.Raycaster();

		//camera
		camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);
		camera.position.set(0, 0, 2000);

		//WebGL Renderer
		rendererGL = new THREE.CanvasRenderer({ antialias: true });
		rendererGL.setSize(window.innerWidth, window.innerHeight);
		rendererGL.domElement.style.zIndex = 5;
		document.getElementById('container').appendChild(rendererGL.domElement);

		// WebGL renderer
		sceneGL = new THREE.Scene();

		//CSS3D Renderer
		rendererCss = new THREE.CSS3DRenderer();
		rendererCss.setSize(window.innerWidth, window.innerHeight);
		rendererCss.domElement.style.position = 'absolute';
		rendererCss.domElement.style.top = 0;
		document.getElementById('container').appendChild(rendererCss.domElement);

		//CSS3D Scene
		sceneCss = new THREE.Scene();

		//controls
		controls = new THREE.OrbitControls(camera);
		controls.rotateSpeed = 1.0;
		controls.zoomSpeed = 1.2;
		controls.panSpeed = 0.8;

//		var fileInit = new FileNode();
		var dir = new DirNode();
		dir.initialize(dirTable);

		var fileNode = new FileNode();
		fileNode.initialize(table);

//		transform(targets.dir, dirObjects, 2000);
//		transform(targets.table, fileObjects,2000);
		connectLines();
		transform(targets.table, fileObjects, 2000);
		transformLine(targets.line, lineTable, 2400);

		window.addEventListener( 'resize', onWindowResize, false );
		window.addEventListener( 'mousemove', onMouseMove, false );
	}

	function connectLines() {
		var dir = dirObjects[0];
    var angle = 180;

		for(var i = 0; i < 10; i++) {
//			var geometry = new THREE.Geometry();

			// Start point r * cos(angle). I.E: 150 is the width of the css border
			var x = dir.position.x + (150 * Math.cos(angle * Math.PI/180));
			var y = dir.position.y + (150 * Math.sin(angle * Math.PI/180));
			var z = dir.position.z;

			// End point r*2 * cos(angle)
			var num = 300;
			var ex = dir.position.x + (num * Math.cos(angle * Math.PI/180));
			var ey = dir.position.y + (num * Math.sin(angle * Math.PI/180));
			var ez = dir.position.z;

			console.log('x ' + x);
			console.log('y ' + y);
			console.log('z ' + z);

			console.log('ex ' + ex);
			console.log('ey ' + ey);
			console.log('ez ' + ez);

			// S Curve
			var curve = new THREE.CubicBezierCurve3(
							new THREE.Vector3(x, y, z),
							new THREE.Vector3(x-80 , y-50, z),
							new THREE.Vector3(x-100, y+50, z),
							new THREE.Vector3(ex, ey, ez)
			);

//			var geometry = new THREE.Geometry();
//			geometry.vertices = curve.getPoints(20);

			targets.line.push(curve);

			var geometry = new THREE.Geometry();
			geometry.vertices.push(	new THREE.Vector3(x, y, z));

			var color = '#ffffff';

			var material = new THREE.LineBasicMaterial( { color: color, linewidth: 0.5 } );
			var line = new THREE.Line(geometry, material);

			lineTable.push(line);
			sceneGL.add(line);

			// End point r*2 * cos(angle)
//			var num =Math.floor(Math.random() * (300 - 200 + 1)) + 200;
			var num = 300;
			var x = dir.position.x + (num * Math.cos(angle * Math.PI/180));
			var y = dir.position.y + (num * Math.sin(angle * Math.PI/180));
      var z = dir.position.z;

//      targets.line.push(new THREE.Vector3(x, y ,z));

			// Assign the end point values to a target Object
			var targetObj = new THREE.Object3D();
      targetObj.position.x = x;
      targetObj.position.y = y;
      targetObj.position.z = z;

			targets.table.push(targetObj);

			// Change angle to vary the position
			angle += 10;
		}

		// Rotate main Circle
		new TWEEN.Tween(dir.rotation)
						.to( {z: "-" + 4 * Math.PI/2}, 3000)
						.easing( TWEEN.Easing.Exponential.InOut )
						.start();

	}


	var mouse = new THREE.Vector2(),
					INTERSECTED, raycaster;

	function hoverLines() {
		// find intersections
		var vector = new THREE.Vector3(mouse.x, mouse.y, 1).unproject(camera);

		raycaster.setFromCamera(mouse, camera);

		var intersects = raycaster.intersectObjects(sceneGL.children);

		if (intersects.length > 0) {

			console.log(INTERSECTED != intersects[0].object);
			if (INTERSECTED != intersects[0].object) {


				if (INTERSECTED) INTERSECTED.material.linewidth(INTERSECTED.currentHex);

				INTERSECTED = intersects[0].object;
				INTERSECTED.currentHex = INTERSECTED.material.linewidth;
				INTERSECTED.material.linewidth = 1;
			}

		} else {

			if (INTERSECTED) INTERSECTED.material.linewidth = 0.5;

			INTERSECTED = null;

		}
	}

	function transformLine(targets, objects, duration) {
		var filtered = [];

		var c = 0;
		var j = 0;

		var interval = setInterval(function() {
			if (c == objects.length) {
				clearInterval(interval);
			}

			var curve = targets[c];
			var object = objects[c];

			var geometry = new THREE.BufferGeometry();

			geometry.vertices = curve.getPoints(1000);

			var tmp = object.geometry.vertices[object.geometry.vertices.length-1];

			var tX = tmp.x;
			var tY = tmp.y;
			var tZ = tmp.z;

			var innerInterval = setInterval(function() {
				if (j == geometry.vertices.length) {
					clearInterval(innerInterval);
				}

				object.geometry.vertices.push(new THREE.Vector3(tX, tY, tZ));

				var x = geometry.vertices[j].x;
				var y = geometry.vertices[j].y;
				var z = geometry.vertices[j].z;

				var change = object.geometry.vertices[object.geometry.vertices.length-1];
				change.x = x;
				change.y = y;
				change.z = z;

				tX = x;
				tY = y;
				tZ = z;

				j++;
			}, 10);

			objects[c].geometry.verticesNeedUpdate = true;
			c++;
		}, 0);

//		for(var i = 0; i < objects.length; i++) {
//			var curve = targets[i];
//			var object = objects[i];
//
//
//			var geometry = new THREE.BufferGeometry();
//			geometry.vertices = curve.getPoints(100);
//
//			var tmp = object.geometry.vertices[object.geometry.vertices.length-1];
//
//			var tX = tmp.x;
//			var tY = tmp.y;
//			var tZ = tmp.z;
//
//
//			for(var j = 0; j < geometry.vertices.length; j++) {
//
//				object.geometry.vertices.push(new THREE.Vector3(tX, tY, tZ));
//
//				var x = geometry.vertices[j].x;
//				var y = geometry.vertices[j].y;
//				var z = geometry.vertices[j].z;
//
//				new TWEEN.Tween(object.geometry.vertices[object.geometry.vertices.length-1])
//					.to( { x: x, y: y, z: z }, Math.random() * 4000 )
//					.easing( TWEEN.Easing.Exponential.InOut )
//					.start();
//
//				tX = x;
//				tY = y;
//				tZ = z;
//			}
//			objects[i].geometry.verticesNeedUpdate = true;
//		}

//				new TWEEN.Tween( object.geometry.vertices[j] )
//					.to( { x: target[j].x, y: target[j].y, z: target[j].z }, Math.random() * duration + duration )
//					.easing( TWEEN.Easing.Exponential.InOut )
//					.start();

//		for(var i = 0; i < targets.length; i+=2) {
//			filtered.push(targets[i]);
//		}
//
//		for(let i = 0; i < objects.length; i++) {
//			if(i!= 0) index = i+1;
//
//			var object = objects[i];
//			var target = filtered[i];
//
//			const sphereGeomtry = new THREE.SphereBufferGeometry(10);
//			const sphereMaterial = new THREE.MeshBasicMaterial( { color: 0xff0000 } );
//			const helper = new THREE.Mesh( sphereGeomtry, sphereMaterial );
//
//			sceneGL.add(helper);
//
//			for(var j = 0; j < object.geometry.vertices.length; j++) {
//
//				new TWEEN.Tween( object.geometry.vertices[j] )
//					.to( { x: target[j].x, y: target[j].y, z: target[j].z }, Math.random() * duration + duration )
//					.easing( TWEEN.Easing.Exponential.InOut )
//					.start();
//			}
//		}


//		for(var i = 0; i < objects.length; i++) {
//			var object = objects[i];
//			var target = targets[i];
//
//			new TWEEN.Tween( object.geometry.vertices[1] )
//							.to( { x: target.x, y: target.y, z: target.z }, Math.random() * duration + duration )
//							.easing( TWEEN.Easing.Exponential.InOut )
//							.start();
//		}
	}

	function transform( targets, objects, duration ) {
		for ( var i = 0; i < objects.length; i ++ ) {

			var object = objects[i];
			var target = targets[i];

			new TWEEN.Tween( object.position )
							.to( { x: target.position.x, y: target.position.y, z: target.position.z }, Math.random() * duration + duration )
							.easing( TWEEN.Easing.Exponential.InOut )
							.start();

			new TWEEN.Tween( object.rotation )
							.to( { x: target.rotation.x, y: target.rotation.y, z: target.rotation.z }, Math.random() * duration + duration )
							.easing( TWEEN.Easing.Exponential.InOut )
							.start();
		}

		new TWEEN.Tween( this )
						.to( {}, duration * 2 )
						.onUpdate(render)
						.start();

	}

	function onWindowResize() {
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();

		rendererCss.setSize( window.innerWidth, window.innerHeight );
		rendererGL.setSize( window.innerWidth, window.innerHeight );

		render();
	}

	function render() {
		rendererCss.render(sceneCss, camera);
		rendererGL.render(sceneGL, camera);
	}

	function onMouseMove(event) {

		event.preventDefault();

		mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
		mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

	}

	function animate() {
		requestAnimationFrame(animate);
		TWEEN.update();
		hoverLines();
		render();
		controls.update();
	}

	function createFile(id, type, name) {
		return file = {
			id: id,
			type: type,
			name: name,
			index: ""
		};
	}

	function createDir(id, type, name) {
		return dir = {
			id: id,
			type: type,
			name: name
		}
	}

	function DirNode() {
		this.dir;
		this.name;
		this.type;
	}

	DirNode.prototype.initialize = function(dirTable) {
		var dir = this.dir;
		var name = this.name;
		var type = this.type;

		for(var i = 0; i < dirTable.length; i++) {
			var dirId = dirTable[i].id;
			var dirName = dirTable[i].name;
			var dirType = dirTable[i].type;

			dir = document.createElement('div');
			dir.className = 'dir';

			var divInner = document.createElement('div');
			divInner.className = 'div-inner';
			dir.appendChild(divInner);

			type = document.createElement('div');
			type.className = 'type';
			type.innerHTML ='<h6 class="line-outer"><span class="inner">'+dirType+'</span></h6>';
			divInner.appendChild(type);

			name = document.createElement('div');
			name.className = 'name';
			dir.appendChild(name);

			var object = new THREE.CSS3DObject(dir);
			object.position.x = 100;
			object.position.y = 100;
			object.position.z = 100;

			sceneCss.add(object);
			dirObjects.push(object);

			var object = new THREE.Object3D();
			object.position.x = ( ( i % 4 ) * 350 ) - 400;
			object.position.y = ( - ( Math.floor( i / 4 ) % 8 ) * 400 ) + 800;
			object.position.z = ( Math.floor( i / 32 ) ) * 10;
			targets.dir.push(object);

		}
	};

	function FileNode() {
		this.file;
		this.id;
		this.name;
		this.type;
	}

	FileNode.prototype.initialize = function(table) {
		var file = this.file;
		var id = this.id;
		var name = this.name;
		var type = this.type;

		var x = 1800;

		for(var i = 0; i < table.length; i++) {
			var fileId = table[i].id;
			var fileName = table[i].name;
			var fileType = table[i].type;

			file = document.createElement('div');
			file.className = 'file ' + fileType.toLowerCase();
//			file.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')';

			id = document.createElement('div');
			id.className = 'id';
			id.textContent = (fileId);
			file.appendChild(id);

			type = document.createElement('div');
			type.className = 'type';
			type.innerHTML = fileType;
			file.appendChild(type);

			var object = new THREE.CSS3DObject(file);
			object.position.x = 100;
			object.position.y = 100;
			object.position.z = 100;

			sceneCss.add(object);

			fileObjects.push(object);

			/**
			 * Arrange Object
			 * i % x has to be the same as i / y
			 * z axis i/z = x*y
			 */

//			var object = new THREE.Object3D();
//			object.position.x = ( ( i % 4 ) * 350 ) - 400;
//			object.position.y = ( - ( Math.floor( i / 4 ) % 8 ) * 400 ) + 800;
//			object.position.z = ( Math.floor( i / 32 ) ) * 10;
////			object.position.z = ( Math.floor( i / 32 ) ) * 1000 - 2000;
		}
	};
</script>
