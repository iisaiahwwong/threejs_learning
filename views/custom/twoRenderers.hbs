<style>
	.file {
		width: 300px;
		height: 300px;
		border-radius: 50%;
		/*box-shadow: 0px 0px 12px rgba(0,255,255,0.5);*/
		border: 10px solid white;
		text-align: center;
		cursor: default;
	}

	.file:hover {
		box-shadow: 0px 0px 12px rgba(0,255,255,0.75);
		border: 1px solid rgba(127,255,255,0.75);
	}

	.file .id {
		position: absolute;
		top: 20px;
		right: 20px;
		font-size: 30px;
		color: rgba(127,255,255,0.75);
	}

	.file .type {
		position: absolute;
		top: 40px;
		left: 0px;
		right: 0px;
		font-size: 60px;
		font-weight: bold;
		color: rgba(255,255,255,0.75);
		text-shadow: 0 0 10px rgba(0,255,255,0.95);
	}

	.file .name {
		position: absolute;
		bottom: 15px;
		left: 0px;
		right: 0px;
		font-size: 20px;
		color: rgba(127,255,255,0.75);
	}

	.title {
		font-size: 5em;
		color: white;
	}

	.encrypt {
		font-size: 100px;
		color: white;
	}

	button {
		color: rgba(127,255,255,0.75);
		background: transparent;
		outline: 1px solid rgba(127,255,255,0.75);
		border: 0px;
		padding: 5px 10px;
		cursor: pointer;
	}
	button:hover {
		background-color: rgba(0,255,255,0.5);
	}
	button:active {
		color: #000000;
		background-color: rgba(0,255,255,0.75);
	}
</style>
<script src="/js/vendor/CSS3DRenderer.js"></script>
<script src="/js/vendor/tween.min.js"></script>

<script src="/js/vendor/Projector.js"></script>
<script src="/js/vendor/CanvasRenderer.js"></script>
<script>
	var camera, light, scene, renderer, rectangle, scene2, renderer2, div, controls;

	var table = [];
	var objects = [];
	var targets = { table: [], sphere: [], helix: [], grid: [] };

	// DOM file class
	function FileNode() {
		this.file;
		this.id;
		this.name;
		this.type;
	}

	FileNode.prototype.initialize = function(table) {
		var file = this.file;
		var id = this.id;
		var name = this.name;
		var type = this.type;

		var x = 1800;
		var index = 0;
		var contentWrap = document.createElement('div');
		contentWrap.className = 'content-wrap';
		contentWrap.innerHTML = '<p style="color: white; font-size: 10em;">hello</p>'


		for(var i = 0; i < table.length; i++) {
			var fileId = table[i].id;
			var fileName = table[i].name;
			var fileType = table[i].type;
			var fileTimestamp = table[i].timestamp;

			file = document.createElement('div');
			file.className = 'file ' + fileType.toLowerCase();
//			file.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')';

			id = document.createElement('div');
			id.className = 'id';
			id.textContent = (fileId);
			file.appendChild(id);

			type = document.createElement('div');
			type.className = 'type';
			type.innerHTML = fileType;
			file.appendChild(type);

			name = document.createElement('div');
			name.className = 'name';
			name.innerHTML = 'X: '+( ( ( i % 4 ) * 350 ) - x) + '<br>' + 'Y: ' +( - ( Math.floor( index / 4 ) % 8 ) * 200 ) + 800;
			file.appendChild(name);

			console.log('File Type: ' + fileType + '\n FileID: ' + fileId + '\n Index: ' + i + '\nX offset: ' + x);

			var object = new THREE.CSS3DObject(file);
			object.position.x = Math.random() * 4000 - 2000;
			object.position.y = Math.random() * 4000 - 2000;
			object.position.z = Math.random() * 4000 - 2000;

			scene2.add(object);

			objects.push(object);

			/**
			 * Arrange Object
			 * i % x has to be the same as i / y
			 * z axis i/z = x*y
			 */

			object = new THREE.Object3D();
			object.position.x = ( ( i % 4 ) * 350 ) - x;
			object.position.y = ( - ( Math.floor( index / 4 ) % 8 ) * 200 ) + 800;
//			object.position.z = ( Math.floor( i / 32 ) ) * 1000 - 2000;
			targets.table.push(object);

			// Sorts the Files into sections. Array has to be sorted by type first.
			if(typeof table[i+1] !== 'undefined') {
				if (table[i + 1].type !== fileType) {
					x -= 1600;
					index = 0;
				}
				else {
					index++;
				}
			}
		}

		var geometry = new THREE.Geometry();
//		for(var i = 0; i < objects.length; i++) {
//
//		}

		var x = objects[0].position.x - 150;
		var y = objects[0].position.y;
		var z = objects[0].position.z;

		geometry.vertices.push(new THREE.Vector3(x, y ,z));

		var x = objects[1].position.x - 150;
		var y = objects[1].position.y;
		var z = objects[1].position.z;

		geometry.vertices.push(new THREE.Vector3(x, y ,z));

		material = new THREE.LineBasicMaterial( { color: 0xffffff, linewidth: 2 } );
		line = new THREE.Line(geometry, material);
		scene.add(line);
	};

	function createFile(id, type, name, time) {
		return file = {
			id: id,
			type: type,
			name: name,
			timestamp: getTime(),
			index: ""
		};
	}

	function getTime() {
		var dt = new Date();
		return dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds();
	}

	init();
	animate();

	function init() {
		//camera
		camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);
		camera.position.set(0, 0, -1000);

		//Scene
		scene = new THREE.Scene();


		//WebGL Renderer
		renderer = new THREE.WebGLRenderer({ antialias: true });
		renderer.setSize(window.innerWidth, window.innerHeight);
		renderer.domElement.style.zIndex = 5;
		document.body.appendChild(renderer.domElement);

		//CSS3D Scene
		scene2 = new THREE.Scene();

		//HTML
		// RAR
		for(var i = 0; i < 10; i++) {
			table.push(createFile(i+1, 'RAR', 'TestingZipFile'));
		}

		// PNG
		for(var i = 0; i < 10; i++) {
			table.push(createFile(i+1, 'PNG', 'Family Photo'));
		}

		// PTTX
		for(var i = 0; i < 10; i++) {
			table.push(createFile(i+1, 'PPTX', 'Proposal Presentation'));
		}

		// Doc
		for(var i = 0; i < 10; i++) {
			table.push(createFile(i+1, 'DOC', 'Executive Summary'));
		}

		var fileNode = new FileNode();
		fileNode.initialize(table);

//		// Custom
//		var geometry2 = new THREE.Geometry();
//
//		geometry2.vertices.push(torus.position);
//		geometry2.vertices.push(div.position);
//
//		console.log(geometry2);
//
//		var material2 = new THREE.LineBasicMaterial( { color: 0x000000, linewidth: 2 } );
//		var line = new THREE.Line(geometry2, material2);
//		scene.add(line);


		//CSS3D Renderer
		renderer2 = new THREE.CSS3DRenderer();
		renderer2.setSize(window.innerWidth, window.innerHeight);
		renderer2.domElement.style.position = 'absolute';
		renderer2.domElement.style.top = 0;
		document.body.appendChild(renderer2.domElement);

		//controls
		controls = new THREE.OrbitControls(camera);
		controls.rotateSpeed = 1.0;
		controls.zoomSpeed = 1.2;
		controls.panSpeed = 0.8;

		transform( targets.table, 2000 );
	}

	function transform( targets, duration ) {

		TWEEN.removeAll();

		for ( var i = 0; i < objects.length; i ++ ) {

			var object = objects[ i ];
			var target = targets[ i ];

			new TWEEN.Tween( object.position )
							.to( { x: target.position.x, y: target.position.y, z: target.position.z }, Math.random() * duration + duration )
							.easing( TWEEN.Easing.Exponential.InOut )
							.start();

			new TWEEN.Tween( object.rotation )
							.to( { x: target.rotation.x, y: target.rotation.y, z: target.rotation.z }, Math.random() * duration + duration )
							.easing( TWEEN.Easing.Exponential.InOut )
							.start();
		}

		new TWEEN.Tween( this )
						.to( {}, duration * 2 )
						.onUpdate( render )
						.start();

	}

	function render() {
		renderer2.render(scene2, camera);
	}

	function animate() {
		requestAnimationFrame(animate);
		renderer2.render(scene2, camera);
		renderer.render(scene, camera);
		controls.update();
	}
</script>