<script type="text/javascript">
  var camera, controls, scene, renderer;

  init();
  animate();

  function init() {
    scene = new THREE.Scene();

    renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);

    document.body.appendChild(renderer.domElement);

    camera = new THREE.PerspectiveCamera(60, window.innerWidth/window.innerHeight, 1, 1000);
    camera.position.z = 3;

    controls = new THREE.OrbitControls(camera, renderer.domElement);

    var geometry = new THREE.CubeGeometry(1000, 1000, 1000);
    var cubeMaterials = [
            new THREE.MeshBasicMaterial({ map: new THREE.TextureLoader().load('images/skybox/borg_rt.JPG'), side: THREE.DoubleSide }),
            new THREE.MeshBasicMaterial({ map: new THREE.TextureLoader().load('images/skybox/borg_lf.JPG'), side: THREE.DoubleSide }),
            new THREE.MeshBasicMaterial({ map: new THREE.TextureLoader().load('images/skybox/borg_ft.JPG'), side: THREE.DoubleSide }),
            new THREE.MeshBasicMaterial({ map: new THREE.TextureLoader().load('images/skybox/borg_bk.JPG'), side: THREE.DoubleSide }),
            new THREE.MeshBasicMaterial({ map: new THREE.TextureLoader().load('images/skybox/borg_up.JPG'), side: THREE.DoubleSide }),
            new THREE.MeshBasicMaterial({ map: new THREE.TextureLoader().load('images/skybox/borg_dn.JPG'), side: THREE.DoubleSide }),


    ];

    var material = new THREE.MeshFaceMaterial(cubeMaterials);
    var cube = new THREE.Mesh(geometry, material);
    scene.add(cube);

    window.addEventListener('resize', onWindowResize, false);
  }

  function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize( window.innerWidth, window.innerHeight );
  }

  function animate() {
    requestAnimationFrame(animate);
    render();
  }

  function render() {
    renderer.render(scene, camera);
  }
</script>