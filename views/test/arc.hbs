<div></div>
<div id="container">

</div>
<script>
	var camera, scene, renderer, controls;
	var mouse, raycaster;

	var width = window.innerWidth,
			height = window.innerHeight;

	var objects = [];

	$(function() {
		init();
		initCircleProperties();
		animate();
	});

	function init() {
		scene = new THREE.Scene();
		camera = new THREE.PerspectiveCamera(60, width/height, .1, 500);
		camera.position.y = -10;
		camera.position.z = 10;

		renderer = new THREE.CanvasRenderer();
		renderer.setClearColor(0x000000, 0.1);
		renderer.setSize(width, height);

		controls = new THREE.OrbitControls(camera, renderer.domElement);

		raycaster = new THREE.Raycaster();
		mouse = new THREE.Vector2();

		//add event listener for mouse and calls function when activated
		document.addEventListener( 'mousedown', onDocumentMouseDown, false );
		document.addEventListener( 'touchstart', onDocumentTouchStart, false );

		$("#container").append(renderer.domElement);

		$(window).resize(function(){
			var SCREEN_WIDTH = window.innerWidth;
			var SCREEN_HEIGHT = window.innerHeight;

			camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;
			camera.updateProjectionMatrix();

			renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );
		});
	}

	function onDocumentTouchStart( event ) {

		event.preventDefault();

		event.clientX = event.touches[0].clientX;
		event.clientY = event.touches[0].clientY;
		onDocumentMouseDown( event );

	}

	function onDocumentMouseDown( event ) {
		event.preventDefault();

		mouse.x = ( event.clientX / renderer.domElement.width ) * 2 - 1;
		mouse.y = - ( event.clientY / renderer.domElement.height ) * 2 + 1;

		raycaster.setFromCamera( mouse, camera );

		var intersects = raycaster.intersectObjects(objects);

		if ( intersects.length > 0 ) {
			this.temp = intersects[ 0 ].object.userData;
			this.name = intersects[ 0 ].object.name;
			console.log(this.temp);
		}
	}

	var x, y, z, radius, angle;
	var obj, objResolution;

	var material, geometry;

	var colors=[0x379392,0x2E4952,0x0BC9C7];

	function initCircleProperties() {
		radius = 1;
		objResolution = 361;

		geometry = new THREE.Geometry();
		material = new THREE.LineBasicMaterial({
			color: colors[0],
			linewidth: 4,
		});

    // Draw Circle
		for(var i = 0; i < objResolution; i++) {
			// Convert angle to radians
			angle = i * Math.PI/180;

			// X Coordinates
			x = radius * Math.cos(angle);
			y = radius * Math.sin(angle);
			z = 0;

			geometry.vertices.push(new THREE.Vector3(x, y, z));
		}

		for(var i = 0; i < 3; i++) {
			obj = new THREE.Line(geometry, material);
			obj.position.z = i-1;
			obj.userData = { index: i };
			scene.add(obj);
			objects.push(obj);
		}
	}

	function animate() {
		requestAnimationFrame(animate);
		renderer.render(scene, camera);
	}

</script>
