<div id="container">

</div>

<script>
  var camera, scene, renderer, controls;

  var width = window.innerWidth,
      height = window.innerHeight;

  $(function() {
    init();
    initCircleProperties();
		animate();
  });

  function init() {
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(60, width/height, .1, 500);
    camera.position.z = 10;

    renderer = new THREE.WebGLRenderer({antialias:true});
    renderer.setClearColor(0x000000, 0.1);
    renderer.setSize(width, height);

    controls = new THREE.OrbitControls(camera, renderer.domElement);


    $("#container").append(renderer.domElement);

    $(window).resize(function(){
      var SCREEN_WIDTH = window.innerWidth;
      var SCREEN_HEIGHT = window.innerHeight;

      camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;
      camera.updateProjectionMatrix();

      renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );
    });
  }

  var x, y, z, radius, angle;
  var obj, objResolution;

	var colors=[0x379392,0x2E4952,0x0BC9C7];
	var group = new THREE.Object3D();
	var waves = [];

  var waveAmount, waveHeight;
  var radiusAddOn;
  var sinePercentage;
  
  function initCircleProperties() {
		var material = new THREE.LineBasicMaterial({
			color: 0x0000ff,
			linewidth: 6
		});

		var geometry = new THREE.Geometry();
		geometry.vertices.push(
						new THREE.Vector3( -10, 0, 0 ),
						new THREE.Vector3( 0, 10, 0 ),
						new THREE.Vector3( 10, 0, 0 )
		);

		var line = new THREE.Line( geometry, material );
		scene.add( line );
		scene.add(group);

  }

  var speedIncrementer;
	var smoothingAmount = 0.14; // how big part of the wave should be smoothed
	var smoothPercentage = 1;

  function updatePoints(waveType, type) {
  	var newPositions = [];

  	for(var i = 0; i <= objResolution; i++) {
  		// angle in radians
  		angle = Math.PI/180 * i;
  		radiusAddOn = 0;
			speedIncrementer = counter/100;

			if(i < sinePercentage * objResolution || i == objResolution) {
				if(i < sinePercentage * objResolution * smoothingAmount)
					smoothPercentage = i/(sinePercentage * objResolution * smoothingAmount);

				if(i > sinePercentage * objResolution * (1-smoothingAmount) &&
								i <= sinePercentage * objResolution)
					smoothPercentage =( sinePercentage * objResolution-i)/(sinePercentage * objResolution * smoothingAmount);
				if(i == objResolution)
					smoothPercentage = 0;

				if(waveType==1) radiusAddOn=waveHeight*smoothPercentage*Math.cos((angle+speedIncrementer)*waveAmount);
				if(waveType==0) radiusAddOn=waveHeight*smoothPercentage*Math.sin((angle+speedIncrementer)*waveAmount);
				if(waveType==2) radiusAddOn=waveHeight*smoothPercentage*Math.cos((angle+Math.PI/180*120+speedIncrementer)*waveAmount);
			}


			// radiusAddOn = waveHeight * smoothPercentage * Math.sin((angle+speedIncrementer)*waveAmount);

			x = (radius+radiusAddOn) * Math.cos(angle + speedIncrementer);
			y = (radius+radiusAddOn) * Math.sin(angle + speedIncrementer);
			z = 0;

			newPositions.push(new THREE.Vector3(x, y, z));
		}

		return newPositions;
  }

  var counter = 0; //  we will base our animation on chages of this counter

  function animate() {
    counter++;
		for (var i = 0; i <  waves.length; i++) {
			waves[i].geometry.vertices = updatePoints(i);
			waves[i].geometry.verticesNeedUpdate = true;
		}

    requestAnimationFrame(animate);
    renderer.render(scene, camera);
  }

</script>